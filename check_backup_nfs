#!/bin/sh
#
# Check the backup age plugin for Nagios
# Written by Felix Enescu (f@qsol.ro)
# Last Modified: 09-17-2012
#
# Usage: ./check_backup_nfs -b <backup_device> -d <dir_to_check> -a <age>
#
# Description:
#
# This plugin will mount <backup_device> on a temp dir and check its 
# age.
#
# Output:
#
# If the <dir_to_check> is older that <age> it will return a CRITICAL state 
# and print out a message in the following format: "<dir_to_check> is X 
# days old (older than <age>)"
#
# Examples:
#
# Check if daily backy is older that 24 hours...
#
#   check_backup_nfs -b x.x.x.x:volume1/folder -d cpbackup/daily -a 24h
#
# Check weekly backy is older that 1 week...
#
#   check_backup_nfs -b x.x.x.x:volume1/folder -d cpbackup/daily -a 24h
#

# Paths to commands used in this script.  These
# may have to be modified to match your system setup.

# A little paranoia is in order
PATH=""

#ECHO="/bin/echo"
#GREP="/bin/egrep"
#DIFF="/bin/diff"
#TAIL="/bin/tail"
#CAT="/bin/cat"
#RM="/bin/rm"
#CHMOD="/bin/chmod"
#TOUCH="/bin/touch"

DATE="/bin/date"
CHMOD="/bin/chmod"
MKDIR="/bin/mkdir"
RMDIR="/bin/rmdir"

SUDO=/usr/bin/sudo
MOUNT="/bin/mount"
UMOUNT="/bin/umount"

PROGNAME=`/bin/basename $0`
PROGPATH=`echo $0 | /bin/sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION="@NP_VERSION@"

. $PROGPATH/utils.sh

print_usage() {
    echo "Usage: $PROGNAME -b backup_device -d dir_to_check -a age"
	echo "       age last char must be hdwmy: hours, days, weeks, months, years. Ex: 12h; 3w"
    echo "Usage: $PROGNAME --help"
    echo "Usage: $PROGNAME --version"
}

print_help() {
    print_revision $PROGNAME $REVISION
    echo ""
    print_usage
    echo ""
    echo "Check the backup age plugin for Nagios"
    echo ""
    support
}

# Make sure the correct number of command line
# arguments have been supplied

if [ $# -lt 1 ]; then
    print_usage
    exit $STATE_UNKNOWN
fi

# Grab the command line arguments

#logfile=$1
#oldlog=$2
#query=$3
exitstatus=$STATE_WARNING #default
while test -n "$1"; do
    case "$1" in
        --help)
            print_help
            exit $STATE_OK
            ;;
        -h)
            print_help
            exit $STATE_OK
            ;;
        --version)
            print_revision $PROGNAME $REVISION
            exit $STATE_OK
            ;;
        -V)
            print_revision $PROGNAME $REVISION
            exit $STATE_OK
            ;;
        --backupdevice)
            backupdevice=$2
            shift
            ;;
        -b)
            backupdevice=$2
            shift
            ;;
        --dirtocheck)
            dirtocheck=$2
            shift
            ;;
        -d)
            dirtocheck=$2
            shift
            ;;
        --age)
            age=$2
            shift
            ;;
        -a)
            age=$2
            shift
            ;;

        --exitstatus)
            exitstatus=$2
            shift
            ;;
         -x)
            exitstatus=$2
            shift
            ;;
       *)
            echo "Unknown argument: $1"
            print_usage
            exit $STATE_UNKNOWN
            ;;
    esac
    shift
done

if [ ! -n "$backupdevice" ]; then
    echo "$PROGNAME: Backup Device not defined!"
    exit $STATE_UNKNOWN
fi

if [ -n "$age" ]; then
	# age defined
	last=${age: -1:1}
	age_num=${age%?}
	
    case "$last" in
        h)
			# hours
            let age_secs=age_num*3600
            ;;
        d)
			# days
            let age_secs=age_num*3600*24
            ;;
        w)
			# weeks
            let age_secs=age_num*3600*24*7
            ;;
        m)
			# months
            let age_secs=age_num*3600*24*7*30
            ;;
        y)
			# years
            let age_secs=age_num*3600*24*7*30*365
            ;;
       *)
            echo "Unknown age format: $age"
            print_usage
            exit $STATE_UNKNOWN
            ;;
    esac	
else
    echo "$PROGNAME: Age not defined!"
    exit $STATE_UNKNOWN
fi


# Use a temp mount point
tempdir=`/bin/date '+%Y%m%d%H%M%S%N'`
tempdir="/tmp/check_log.${tempdir}"
$MKDIR $tempdir
rc=$?
if [[ $rc != 0 ]] ; then
    echo "$PROGNAME: Unable to create mount point $tempdir! Error: $rc"
    exit $STATE_UNKNOWN
fi

$CHMOD 0700 $tempdir
rc=$?
if [[ $rc != 0 ]] ; then
    echo "$PROGNAME: Unable to chmod mount point $tempdir! Error: $rc"
	$RMDIR $tempdir
    exit $STATE_UNKNOWN
fi

$SUDO $MOUNT -t nfs $backupdevice $tempdir
if [[ $rc != 0 ]] ; then
    echo "$PROGNAME: Unable to mount device $backupdevice on $tempdir! Error: $rc"
 	$RMDIR $tempdir
    exit $STATE_UNKNOWN
fi

if [ ! -d "$tempdir/$dirtocheck" ]; then
    echo "$PROGNAME: Directory $dirtocheck does not exists!"
	$SUDO $UMOUNT $tempdir
	$RMDIR $tempdir
    exit $STATE_UNKNOWN
fi

dirsecs=$( $DATE -r $tempdir/$dirtocheck  +'%s' )
rc=$?
if [[ $rc != 0 ]] ; then
    echo "$PROGNAME: Unable to get $dirtocheck age! Error: $rc"
	$SUDO $UMOUNT $tempdir
	$RMDIR $tempdir
    exit $STATE_UNKNOWN
fi
crtsecs=$( $DATE +'%s' )

let dir_age_secs=crtsecs-dirsecs

if [ "$dir_age_secs" -ge "$age_secs" ] ; then
	# Backup is stale
	echo "Backup $dirtocheck on device $backupdevice is stale - older than $age"
    exitstatus=$STATE_CRITICAL
else
	# Backup is fresh
    echo "Backup $dirtocheck on device $backupdevice is fresh - newer than $age"
    exitstatus=$STATE_OK
fi

$SUDO  $UMOUNT $tempdir
$RMDIR $tempdir

exit $exitstatus

