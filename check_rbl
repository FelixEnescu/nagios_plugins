#!/usr/bin/perl


package main;

# check_rbl is a Nagios plugin to check if an SMTP server is black- or
# white- listed
#
# See  the INSTALL file for installation instructions
#
# Copyright (c) 2007, ETH Zurich.
# Copyright (c) 2010, Elan Ruusamae <glen@delfi.ee>.
#
# This module is free software; you can redistribute it and/or modify it
# under the terms of GNU general public license (gpl) version 3.
# See the LICENSE file for details.
#
# RCS information
# enable substitution with:
#   $ svn propset svn:keywords "Id Revision HeadURL Source Date"
#
#   $Id: check_rbl 1264 2011-07-11 05:45:43Z corti $
#   $Revision: 1264 $
#   $HeadURL: https://svn.id.ethz.ch/nagios_plugins/check_rbl/check_rbl $
#   $Date: 2011-07-11 07:45:43 +0200 (Mon, 11 Jul 2011) $

use strict;
use warnings;

use 5.00800;

use IO::Select;
use Nagios::Plugin 0.31;
use Nagios::Plugin::Getopt;
use Nagios::Plugin::Threshold;
use Nagios::Plugin::Functions;
use Net::DNS;
use Readonly;

our $VERSION = '1.3.0';

Readonly our $DEFAULT_RETRIES       => 4;
Readonly our $DEFAULT_WORKERS       => 20;
Readonly our $DEFAULT_QUERY_TIMEOUT => 15;

Readonly our $DEFAULT_CMDFILE		=> "/var/spool/icinga/cmd/icinga.cmd";
Readonly our $DEFAULT_NAG_SERVICE	=> "DNS BlackList C Class";

# IMPORTANT: Nagios plugins could be executed using embedded perl in this case
#            the main routine would be executed as a subroutine and all the
#            declared subroutines would therefore be inner subroutines
#            This will cause all the global lexical variables not to stay shared
#            in the subroutines!
#
# All variables are therefore declared as package variables...
#

## no critic (ProhibitPackageVars)
our ( @listed, @timeouts, %bl, %wl, $options, $plugin, $threshold, $res, $timeouts, $iponly, $allclass );
our ( $ip, $hname, $dom,$ohost ); 
# the script is declared as a package so that it can be unit tested
# but it should not be used as a module
if ( !caller ) {
    run();
}

##############################################################################
# subroutines

##############################################################################
# Usage     : verbose("some message string", $optional_verbosity_level);
# Purpose   : write a message if the verbosity level is high enough
# Returns   : n/a
# Arguments : message : message string
#             level   : options verbosity level
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub verbose {

    # arguments
    my $message = shift;
    my $level   = shift;

    if ( !defined $message ) {
        $plugin->nagios_exit( UNKNOWN,
            q{Internal error: not enough parameters for 'verbose'} );
    }

    if ( !defined $level ) {
        $level = 0;
    }

    if ( $level < $options->verbose || $options->debug) {
        if ( !print $message ) {
            $plugin->nagios_exit( UNKNOWN, 'Error: cannot write to STDOUT' );
        }
    }

    return;

}

##############################################################################
# Usage     : mdns(\@addresses, $callback)
# Purpose   : Perform multiple DNS lookups in parallel
# Returns   : n/a
# See also  : Perl Net::DNS module mresolv in examples
#
# Resolves all IPs in C<@addresses> in parallel.
# If answer is found C<$callback> is called with arguments as: $name, $host.
#
# Author: Elan Ruusamae <glen@delfi.ee>, (c) 1999-2010
## no critic (ProhibitExcessComplexity)
sub mdns {

    my ( $data, $callback ) = @_;

    # number of requests to have outstanding at any time
    my $workers = $options->workers();

    # timeout per query (seconds)
    my $timeout = $options->get('query-timeout');
    my $debug   = $options->debug();

    my $sel = IO::Select->new();
    my $eof = 0;

    my @addrs = @{$data};
    my %addrs;
    while (1) {

        #----------------------------------------------------------------------
        # Read names until we've filled our quota of outstanding requests.
        #----------------------------------------------------------------------

        while ( !$eof && $sel->count() < $workers ) {

            if ($debug) {
                ## no critic (RequireCheckedSyscall)
                print 'DEBUG: reading...';
            }
            my $name = shift @addrs;
            if ( !defined $name ) {
                if ($debug) {
                    ## no critic (RequireCheckedSyscall)
                    print "EOF.\n";
                }
                $eof = 1;
                last;
            }
            if ($debug) {
                ## no critic (RequireCheckedSyscall)
                print "NAME: $name\n";
            }
            my $sock = $res->bgsend($name);

            # we store in a hash the query we made, as parsing it back from
            # response gives different ip for ips with multiple hosts
            $addrs{$sock} = $name;
            $sel->add($sock);
            if ($debug) {
                ## no critic (RequireCheckedSyscall)
                print "DEBUG: name = $name, outstanding = ", $sel->count(),
                  "\n";
            }
        }

        #----------------------------------------------------------------------
        # Wait for any replies.  Remove any replies from the outstanding pool.
        #----------------------------------------------------------------------

        my @ready;
        my $timed_out = 1;

        if ($debug) {
            ## no critic (RequireCheckedSyscall)
            print "DEBUG: waiting for replies\n";
        }

        @ready = $sel->can_read($timeout);
        while (@ready) {

            $timed_out = 0;

            if ($debug) {
                ## no critic (RequireCheckedSyscall)
                print 'DEBUG: replies received: ', scalar @ready, "\n";
            }

            foreach my $sock (@ready) {
                if ($debug) {
                    ## no critic (RequireCheckedSyscall)
                    print "DEBUG: handling a reply\n";
                }
                my $addr = $addrs{$sock};
                delete $addrs{$sock};
                $sel->remove($sock);

                my $ans = $res->bgread($sock);
                my @host;
                if ($ans) {

                    foreach my $rr ( $ans->answer ) {

                        ## no critic(ProhibitDeepNests)
                        if ( !( $rr->type eq 'A' ) ) {
                            next;
                        }

                        push @host, $rr->address;
						verbose "addr: $addr is host: ". $rr->address . "\n";
                        # take just the first answer
                        #last;
                    }
                }
                else {
                    if ($debug) {
                        ## no critic (RequireCheckedSyscall)
                        print 'DEBUG: no answer: ' . $res->errorstring() . "\n";
                    }
                }
                &{$callback}( $addr, @host );
            }

            @ready = $sel->can_read(0);

        }

        #----------------------------------------------------------------------
        # If we timed out waiting for replies, remove all entries from the
        # outstanding pool.
        #----------------------------------------------------------------------

        if ($timed_out) {
            if ($debug) {
                ## no critic (RequireCheckedSyscall)
                print "DEBUG: timeout: clearing the outstanding pool.\n";
            }
            foreach my $sock ( $sel->handles() ) {
                my $addr = $addrs{$sock};
                delete $addrs{$sock};
                $sel->remove($sock);

                # callback for hosts that timed out
                &{$callback}( $addr, q{} );
            }
        }

        if ($debug) {
            ## no critic (RequireCheckedSyscall)
            print 'DEBUG: outstanding = ', $sel->count(), ", eof = $eof\n";
        }

        #----------------------------------------------------------------------
        # We're done if there are no outstanding queries and we've read EOF.
        #----------------------------------------------------------------------

        last if ( $sel->count() == 0 ) && $eof;
    }

    return;

}

##############################################################################
# Usage     : run();
# Purpose   : main method
# Returns   : n/a
# Arguments : n/a
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub run {

    ################################################################################
    # Initialization

    $plugin = Nagios::Plugin->new( shortname => 'CHECK_RBL' );

    my $time = time;

    ########################
    # Command line arguments

    $options = Nagios::Plugin::Getopt->new(
        usage   => 'Usage: %s [OPTIONS]',
        version => $VERSION,
        url     => 'https://trac.id.ethz.ch/projects/nagios_plugins',
        blurb   => 'Check SMTP blakl- or white- isting status',
    );

    $options->arg(
        spec     => 'critical|c=i',
        help     => 'Number of blacklisting servers for a critical warning',
        required => 0,
        default  => 0,
    );

    $options->arg(
        spec     => 'warning|w=i',
        help     => 'Number of blacklisting servers for a warning',
        required => 0,
        default  => 0,
    );

    $options->arg(
        spec     => 'debug|d',
        help     => 'Prints debugging information',
        required => 0,
        default  => 0,
    );

    $options->arg(
        spec     => 'server|s=s@',
        help     => 'RBL server',
        required => 1,
    );

    # FLX 2012-09-16 Added RHSBL support
    $options->arg(
        spec     => 'rhserver|S=s@',
        help     => 'RHSBL server',
        required => 0,
    );

    $options->arg(
        spec     => 'host|H=s',
        help     => 'SMTP server to check',
        required => 1,
    );

    $options->arg(
        spec     => 'iponly|i',
        help     => 'Check only IP based RBL',
        required => 0,
        default  => 0,
    );
	
    $options->arg(
        spec     => 'pasive|p',
        help     => 'Submit a pasive check result to Nagios/Icinga',
        required => 0,
        default  => 0,
    );
	
    $options->arg(
        spec     => 'cmdfile|c=s',
        help     => 'Nagios/Icinga command file',
        required => 0,
		default  => $DEFAULT_CMDFILE,
    );

	$options->arg(
        spec     => 'nag_host|n=s',
        help     => 'Hostname as configured in Nagios/Icinga',
        required => 0,
    );
	
	$options->arg(
        spec     => 'nag_service|g=s',
        help     => 'Service description as configured in Nagios/Icinga',
        required => 0,
 		default  => $DEFAULT_NAG_SERVICE,
	);

    $options->arg(
        spec     => 'allclass|a',
        help     => 'Check entire class C of host, assume iponly',
        required => 0,
        default  => 0,
    );
	
   $options->arg(
        spec     => 'retry|r=i',
        help     => 'Number of times to try a DNS query (default is 4) ',
        required => 0,
        default  => $DEFAULT_RETRIES,
    );

    $options->arg(
        spec     => 'workers=i',
        help     => 'Number of parallel checks',
        required => 0,
        default  => $DEFAULT_WORKERS,
    );

    $options->arg(
        spec     => 'whitelistings|wl',
        help     => 'Check whitelistings instead of blacklistings',
        required => 0,
        default  => 0,
    );

    $options->arg(
        spec     => 'query-timeout=i',
        help     => 'Timeout of the RBL queries',
        required => 0,
        default  => $DEFAULT_QUERY_TIMEOUT,
    );

    $options->getopts();

    ###############
    # Sanity checks
	
    my $debug   = $options->debug();
	$iponly = $options->iponly;
	$allclass = $options->allclass;
	$ohost = $options->host;
	
	
    if ( $options->critical < $options->warning ) {
        $plugin->nagios_exit( UNKNOWN,
            'critical has to be greater or equal warning' );
    }
	
	if ( $options->pasive ) {
		if ( !$options->nag_host) {
			$plugin->nagios_exit( UNKNOWN,
				'Hostname configured in Nagios/Icinga must be provided in pasive mode' );
		}
		if ( !$options->nag_service) {
			$plugin->nagios_exit( UNKNOWN,
				'Service description configured in Nagios/Icinga must be provided in pasive mode' );
		}		
    }

    $res = Net::DNS::Resolver->new();

    if ( $res->can('force_v4') ) {
        $res->force_v4(1);
    }

    $res->retry( $options->retry() );

    $ip = $ohost;
	
	
    if ( $ip =~ m/[[:lower:]]/mxs ) {
		# FLX 2012-09-16 Added RHSBL support
		$hname = $ip; # keep hostname
		$ip = undef;
        mdns(
            [ $ohost ],
            sub {
                my ( $addr, @host ) = @_;
                # Just take first address
				$ip = pop @host;
            }
        );

    } else {
		# FLX 2012-09-16 Added RHSBL support
		# Got an IP address -> resolve to a domain
		
		my $ans = $res->query($ip);
		if ($ans) {
			foreach my $rr ( $ans->answer ) {
				## no critic(ProhibitDeepNests)
				if ( !( $rr->type eq 'PTR' ) ) {
					next;
				}
				$hname = $rr->ptrdname;

				# take just the first answer
				last;
			}
		} else {
			if ($debug) {
				## no critic (RequireCheckedSyscall)
				print 'DEBUG: no answer: ' . $res->errorstring() . "\n";
			}
		}
	}
	

    if ( !$ip ) {
        $plugin->nagios_exit( UNKNOWN, 'Cannot resolve ' . $ohost );
    }

    if ( !$hname && !$iponly ) {
        $plugin->nagios_exit( UNKNOWN, 'Cannot resolve ' . $ohost );
    }

	if ( $iponly ) {
		$hname = $ip 
	} else {
		# Remove host name to keep only domain
		my @dom_list = split(/\./, $hname);
		my $tld = pop(@dom_list); #com
		my $baredomain = pop(@dom_list); #yahoo
		$dom = $baredomain . "." . $tld;
		verbose 'Using domain ' . $dom . " for RHSBL lists\n";
	}
	
    verbose 'Using ' . $options->timeout . " as global script timeout\n";
    alarm $options->timeout;

    ################
    # Set the limits

    $threshold = Nagios::Plugin::Threshold->set_thresholds(
        warning  => $options->warning,
        critical => $options->critical,
    );

    ################################################################################

	my $start_ip;
	my $end_ip;
	( my $class_ip = $ip ) =~ s/(\d{1,3}) [.] (\d{1,3}) [.] (\d{1,3}) [.] (\d{1,3})/$1.$2.$3./mxs;

	if ( $allclass ) {
		$start_ip = 1;
		$end_ip = 254;
		$iponly = 1; # this implies iponly
	} else {
		( $start_ip = $ip ) =~ s/(\d{1,3}) [.] (\d{1,3}) [.] (\d{1,3}) [.] (\d{1,3})/$4/mxs;
		$end_ip = $start_ip;
	}
	
	my @servers; 
	my $nservers = 0;
	if ( defined $options->server ) { 
		foreach my $server ( @{ $options->server } ) {
			#verbose "Server: $server\n";
			# Check if any servers have BL values or WL values
			my ($rbl, $lst) = split ( /#/, $server );
			#verbose "Server : $server, split one: =$rbl=, =$lst=\n";
			push ( @servers, $rbl );
			if ( defined $lst) {
				my ($type, $vals) = split ( /=/, $lst);
				#verbose "Server: $server, split two: =$type=, =$vals=\n";

				if ( $type eq "BL" ) {
					$bl{$rbl} = $vals;
				} elsif ( $type eq "WL" ) {
					$wl{$rbl} = $vals;
				} else {
					$plugin->nagios_exit( UNKNOWN, 'Unknown list id $type' );
				}
			}
		}
		$nservers = scalar @servers;
	}
	
	my @rhservers;
	my $nrhservers = 0;
	if ( defined $options->rhserver ) {
		if ( !$iponly ) {
			foreach my $server ( @{ $options->rhserver } ) {
				#verbose "RHServer: $server\n";
				# Check if any servers have BL values or WL values
				my ($rbl, $lst) = split ( /#/, $server );
				#verbose "Server: $server, split: =$rbl=, =$lst=\n";
				push ( @rhservers, $rbl );
				if ( defined $lst) {
					my ($type, $vals) = split ( /=/, $lst);
					#verbose "Server: $server, split: =$type=, =$vals=\n";
					if ( $type eq "BL" ) {
						$bl{$rbl} = $vals;
					} elsif ( $type eq "WL" ) {
						$wl{$rbl} = $vals;
					} else {
						$plugin->nagios_exit( UNKNOWN, 'Unknown list id $type' );
					}
				}

			}
			$nrhservers = scalar @rhservers;
			$nservers += $nrhservers;
		}
	}
	
    if ( $nservers <= 0 ) {
        $plugin->nagios_exit( UNKNOWN, 'No RBL servers' );
    }
	
    my $total = 0;
	my $listed_hosts = 0;
    my $status = "";

	
	for (my $last_digit = $start_ip; $last_digit <= $end_ip; $last_digit++ ) {
		$ip = $class_ip . $last_digit;
		@listed = (); 
		@timeouts = ();
		
		
		if ( $allclass ) {
			$ohost = $ip;
		}
		
	    # build address lists
		my @addrs;
		foreach my $server (@servers) {
			( my $local_ip = $ip ) =~ s/(\d{1,3}) [.] (\d{1,3}) [.] (\d{1,3}) [.] (\d{1,3})/$4.$3.$2.$1.$server/mxs;
			push @addrs, $local_ip;
		}

		if ( !$iponly ) {
			# FLX 2012-09-16 Added RHSBL support
			foreach my $rhserver (@rhservers) {
				my $local_host = $dom . '.' . $rhserver;
				push @addrs, $local_host;
			}
		}
		
		mdns(
			\@addrs,
			sub {
				my ( $addr, @host ) = @_;
				my $tmp = $addr;
				# extract RBL we checked
				$addr =~ s/^(?:\d+[.]){4}//mxs;
				if( !$iponly) {
					$addr =~ s/^($dom)\.//mxs;
				}
				if ( scalar @host ) {
					if ( $host[0] eq q{} ) {
						push @timeouts, $addr;
					}
					else {
						verbose "listed in $addr as $host[0]\n";
						if ( !$options->get('whitelistings') ) {
							
							if ( exists $bl{$addr} ) {
								verbose "===== BL listed in $addr as $host[0] =$bl{$addr}= \n";
								# We got an answer. For each answer check if it present in black or white answers 
								foreach my $crt_host (@host) {
									if( $bl{$addr} =~ m/$crt_host/) { 
										verbose "===== SPECIAL MATCH listed in $addr as $crt_host =$bl{$addr}= \n";
										push @listed, $addr;
										last;
									}
								}
							} elsif ( exists $wl{$addr} ) {
								verbose "===== WL listed in $addr as $host[0] =$wl{$addr}= \n";
								# We got an answer. FOr each answer check if it present in black or white answers 
								foreach my $crt_host (@host) {
									if( $wl{$addr} !~ m/$crt_host/) { 
										verbose "===== SPECIAL NOT MATCH listed in $addr as $crt_host =$wl{$addr}= \n";
										push @listed, $addr;
										last;
									}
								}
							
							} else {
								push @listed, $addr;
							}
						}
					}
				}
				else {
					verbose "$tmp not listed in $addr\n";
					if ( $options->get('whitelistings') ) {
						push @listed, $addr;
					}
				}
			}
		);

		$total += scalar @listed;
		
		if (scalar @listed > 0 ) {
			$listed_hosts ++;
			
			if ( $options->get('whitelistings') ) {

				$status .=
					$ohost
				  . " not whitelisted on " . scalar @listed . " "
				  . ( ( scalar @listed == 1 ) ? 'server' : 'servers' )
				  . " of $nservers";
			} else {
				$status .=
					$ohost
				  . " blacklisted on " . scalar @listed . " "
				  . ( ( scalar @listed == 1 ) ? 'server' : 'servers' )
				  . " of $nservers";

			}
			$status .= " (@listed); ";

		}


		# append timeout info, but do not account these in status
		if (@timeouts) {
			$timeouts = scalar @timeouts;
			$status .=
				" ($timeouts server"
			  . ( ( $timeouts > 1 ) ? 's' : q{} )
			  . ' timed out: '
			  . join( ', ', @timeouts ) . ')';
		}
		
		
	} # for all IPs
 
	if ( $total == 0) {
		if ( $allclass ) {
			if ( $options->get('whitelistings') ) {

				$status .=
					$class_ip . "0/24"
				  . " not whitelisted on 0 servers"
				  . " of $nservers";
			} else {
				$status .=
					$class_ip . "0/24"
				  . " blacklisted on 0 servers"
				  . " of $nservers";
			}
		} else {
			if ( $options->get('whitelistings') ) {

				$status .=
					$ohost
				  . " not whitelisted on 0 servers"
				  . " of $nservers";
			} else {
				$status .=
					$ohost
				  . " blacklisted on 0 servers"
				  . " of $nservers";
			}
		}
	}
	

	# If we check many IPs report how many where listed.
	$plugin->add_perfdata(
		label     => 'hosts',
		value     => $listed_hosts,
		uom       => q{},
		threshold => $threshold,
	);
	
    $plugin->add_perfdata(
        label     => 'servers',
        value     => $total,
        uom       => q{},
        threshold => $threshold,
    );

    $plugin->add_perfdata(
        label => 'time',
        value => time - $time,
        uom   => q{s},
    );
	
	if ( $options->pasive ) {
	
		Nagios::Plugin::Functions::_fake_exit(1);
		my $e = $plugin->nagios_exit( $threshold->get_status($total), $status );
		
		#print "=msg=" . $e->message . "==\n";
		#print "=code=" . $e->return_code . "==\n";
		my $cmdfile = $options->cmdfile;
		
		my $cmdline = "[" . time() . "] PROCESS_SERVICE_CHECK_RESULT;";
		$cmdline .= 
			  $options->nag_host . ";"
			. $options->nag_service . ";"
			. $e->return_code . ";"
			. $e->message;
		
		#open( FILE, "|" . $options->cmdfile ) or 			$plugin->nagios_exit( UNKNOWN, 'Cannot open cmd file ' . $options->cmdfile . ' for append: '. $! );
		#print FILE $cmdline or 			$plugin->nagios_exit( UNKNOWN, 'Cannot write to cmd file ' . $options->cmdfile . ' : '. $! );
		#close FILE ;
		my $result = `/bin/echo "$cmdline" >> $cmdfile`;
		#print "=cmd=" . $cmdline . "==\n";

	} else {
		$plugin->nagios_exit( $threshold->get_status($total), $status );
	}
    return;

}

1;
